using UnityEditor;
using UnityEngine;
using psai.net;

[CustomEditor(typeof(PsaiCoreManager), true)]
public class PsaiCoreManagerEditor : Editor
{
    public override void OnInspectorGUI() 
    {
        PsaiCoreManager pcm = target as PsaiCoreManager;

        // watch out! CustomEditors will do wonky things to Prefabs, resulting in the changes not being saved.
        // This is why you have to use SerializedProperties.
        serializedObject.Update();  // This is important!

        EditorGUILayout.Separator();

        /// Volume
        SerializedProperty volume_prop  = serializedObject.FindProperty("volume");
        pcm = (PsaiCoreManager)this.target;

        pcm.volume = EditorGUILayout.Slider(new GUIContent("psai Master Volume"), pcm.volume, 0.0f, 1.0f);
        volume_prop.floatValue = pcm.volume;

        SerializedProperty audiomixergroup_prop = serializedObject.FindProperty("outputAudioMixerGroup");
        pcm.outputAudioMixerGroup = EditorGUILayout.ObjectField("Output Audio Mixer Group", pcm.outputAudioMixerGroup, typeof(UnityEngine.Audio.AudioMixerGroup), false) as UnityEngine.Audio.AudioMixerGroup;
        audiomixergroup_prop.objectReferenceValue = pcm.outputAudioMixerGroup;

        EditorGUILayout.Separator();

        SerializedProperty keepBetweenScenes_prop = serializedObject.FindProperty("keepBetweenScenes");
        pcm.keepBetweenScenes = EditorGUILayout.Toggle(new GUIContent("Don't destroy on Scene load", "Enable this if you wish to keep this Psai instance when switching to the next Scene."), pcm.keepBetweenScenes);
        keepBetweenScenes_prop.boolValue = pcm.keepBetweenScenes;

        EditorGUILayout.Separator();

        //// LogLevel
        SerializedProperty logLevel_prop = serializedObject.FindProperty("logLevel");
        pcm.logLevel = (psai.net.LogLevel)EditorGUILayout.EnumPopup(new GUIContent("Log Level", "This controls the amount of status information written to the output console. 'Errors' will only log critical errors, whereas 'Debug' is the most verbose one and will also log internal debug information."), pcm.logLevel);
        logLevel_prop.enumValueIndex = (int)pcm.logLevel;


        /// log TriggerScripts
        SerializedProperty logTriggerScripts_prop = serializedObject.FindProperty("logTriggerScripts");
        pcm.logTriggerScripts = EditorGUILayout.Toggle(new GUIContent("Log Trigger Scripts", "Enable this if you also want to log additional status information generated by the psai Trigger Scripts in your Scene."), pcm.logTriggerScripts);
        logTriggerScripts_prop.boolValue = pcm.logTriggerScripts;


        EditorGUILayout.Separator();

        // triggerEvaluationIntervalInSeconds
        SerializedProperty triggerEvaluationInterval_props = serializedObject.FindProperty("triggerEvaluationIntervalInSeconds");
        pcm.triggerEvaluationIntervalInSeconds = EditorGUILayout.FloatField(new GUIContent("Evaluation Interval of Triggers (seconds)", "This this sets the interval in which all the Trigger Scripts in your Scene will be evaluated. Low values will result in faster reaction time but higher CPU load."),pcm.triggerEvaluationIntervalInSeconds);
        triggerEvaluationInterval_props.floatValue = pcm.triggerEvaluationIntervalInSeconds;

        EditorGUILayout.Separator();


        // buffer / playback latencies
        SerializedProperty bufferLatencyMs_props = serializedObject.FindProperty("bufferLatencyMs");
        SerializedProperty playbackLatencyMs_props = serializedObject.FindProperty("playbackLatencyMs");
        pcm.bufferLatencyMs = EditorGUILayout.IntField(new GUIContent("Buffer Latency (ms)", "This sets the buffer latency (in mlliseconds) that the target platform of your game is granted to load an audio clip from its file system. Low values will make psai react faster, but may cause timing problems."),pcm.bufferLatencyMs);
        pcm.playbackLatencyMs = EditorGUILayout.IntField(new GUIContent("Playback Latency (ms)", "This sets the buffer latency (in millisecond) that the target platform of your game is granted to play back a prebuffered audio clip. Low values will make psai react faster, but may cause timing problems."), pcm.playbackLatencyMs);
        bufferLatencyMs_props.intValue = pcm.bufferLatencyMs;
        playbackLatencyMs_props.intValue = pcm.playbackLatencyMs;

        serializedObject.ApplyModifiedProperties();     // This is important!!
    }
}
